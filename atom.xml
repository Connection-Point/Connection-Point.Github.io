<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Connection-Point.GitHub.io</id>
    <title>Oh？旅行者你来了！</title>
    <updated>2022-03-24T08:26:20.941Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Connection-Point.GitHub.io"/>
    <link rel="self" href="https://Connection-Point.GitHub.io/atom.xml"/>
    <subtitle>简简单单的程序员分享部落格</subtitle>
    <logo>https://Connection-Point.GitHub.io/images/avatar.png</logo>
    <icon>https://Connection-Point.GitHub.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Oh？旅行者你来了！</rights>
    <entry>
        <title type="html"><![CDATA[在Python上利用Open-Cv实现人脸识别]]></title>
        <id>https://Connection-Point.GitHub.io/post/zai-python-shang-li-yong-open-cv-shi-xian-ren-lian-shi-bie/</id>
        <link href="https://Connection-Point.GitHub.io/post/zai-python-shang-li-yong-open-cv-shi-xian-ren-lian-shi-bie/">
        </link>
        <updated>2022-03-24T08:08:48.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>在本文中我将介绍一个异常简单的使用Python语言和开源库OpenCV的人脸识别方法，供此开启人脸识别之旅。</p>
<p>在回复区提出任何问题之前：</p>
<ol>
<li>不要略过文章而直接去尝试运行程序代码。你不仅需要调通代码，还需要在理解代码功能的基础上对代码进行故障排解。</li>
<li>确保你使用的是OpenCV V2版本。</li>
<li>为了保证脚本进行正常，你需要配备一个功能正常的网络摄像头。</li>
<li>首先浏览一下其他人的点评和问题，因为有可能你的问题别人已经提出过。<br>
多谢。</li>
</ol>
<p><strong>OpenCV</strong><br>
OpenCV是计算机视觉领域最受欢迎的库。OpenCV最早是使用C/C++语言进行编写的，现已支持Python语言捆绑使用。 OpenCV使用机械学习算法对图像中的人脸进行搜索。由于有着与人脸一样复杂的原因，不存在一项简便的测试可以告知人们是否能够识别出人脸。相反，算法需要对成千上万细小的模式和特征进行匹配。面部识别算法被分解成成千上万很小的、易理解的任务，每一个任务较易实现。这些任务被称为分类器。<br>
像人脸一样，你可能有6，000个基于更多的分类器在进行人脸检测过程中，每一个分类器都需要进行匹配（当然要在一定的误差范围内）。但这其中就有问题了。在人脸识别过程中，算法从图片的左上角开始向右下角按小块逐步进行匹配，对每一个小块的识别过程中，算法都会持续的问：“这是人脸么？这是人脸么？这是人脸么？”由于在每个小块有着6000甚至更多的匹配项需要进行匹配，你可能会有无数的计算要执行，这些计算将引发你的电脑发生死机。</p>
<p>为解决这个问题，OpenCV使用了级联技术。那什么是级联?最适当的答案就在字典中。级联就是一个瀑布或者一系列的瀑布。</p>
<p>像一系列的瀑布过程一样，OpenCV级联将人脸检测过程拆分成了多个过程。在每一个图像小块中只进行一次粗略的测试。如果测试通过，接下来进行更详细的细节测试，依次重复。检测算法中有30至50个这种过程或者级联，只有在所有过程成功后才会最终识别到人脸。这样做的好处是在最初的几个过程中大多数的图片将会因不满足测试而被过略掉，算法可以无需浪费时间对每一张图像的6，000个属性进行检验。人脸识别算法运行耗时由数小时级降至实时级。</p>
<p><strong>级联实现</strong><br>
理论听起来非常复杂，但实现起来去非常简单。级联其实就是一组包含了OpenCV用于进行目标识别的数据组成的XML文件。只需使用你想用的级联对你的代码进行初始化操作，其余过程由级联替你完成。鉴于人脸识别是如此的普适，OpenCV包含了大量的用于人脸识别、眼部识别、手部及腿部识别的内置级联。甚至还包含了对非人物对象识别使用的级联工具。例如，你是一个香蕉店的老板，OpenCV就有一个对消费者偷香蕉的行为追踪的级联。</p>
<p><strong>OpenCV安装</strong></p>
<p>首先需要找到适合你电脑的安装文件。我发现安装OpenCV才是整个过程中最难的部分。如果你最到了奇怪的无法解释的报错，有可能是因为库冲突，32位和64位差异等。我总结的最简单方法是安装一台Linux虚拟机然后从头开始安装。如果说想要比较方便的话可以像我一样使用Pycharm IDE直接从Interpreter设置哪里下载OpenCV目录包</p>
<p>一旦安装完成，开启一个Python会话，然后输入以下代码对安装是否正常进行确认：<br>
<code>$ python</code><br>
<code>import cv2</code></p>
<p>如果没有任何报错，可以继续以下步骤。</p>
<p>理解代码</p>
<p>让我们开始分解真实的代码，可以从repo网站下载。需下载脚本face_detect.py，图片abba.png和XML文件haar_cascade_frontalface_default.xml三个文件。</p>
<p><code># Get user supplied values</code><br>
<code>imagePath = sys.argv[1]</code><br>
<code>cascPath = sys.argv[2]</code></p>
<p>首先将相片和级联名称传递给命令行的参数。我们将会使用Abba相片和由OpenCV提供的进行人脸检测的默认级联。</p>
<p><code># Create the haar 级联</code><br>
<code>facecascade = cv2.cascadeClassifier(cascPath)</code></p>
<p>现在我们创建了级联，并用我们的人脸级联初始化了它。这样就把该级联载入内存并且可以使用了。记住，级联就是一个包含了用于人脸检测的数据的XML文件。</p>
<p><code># Read the image</code><br>
<code>image = cv2.imread(imagePath)</code><br>
<code>gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</code></p>
<p>下面是读取图片并进行灰度转换。在进行灰度转换过程中已经完成了OpenCV的多个操作步骤。</p>
<p><code># Detect faces in the image</code><br>
<code>faces = facecascade.detectMultiScale(</code><br>
<code>gray,</code><br>
<code>scaleFactor=1.1,</code><br>
<code>minNeighbors=5,</code><br>
<code>minSize=(30, 30),</code><br>
<code>flags = cv2.cv.CV_HAAR_SCALE_IMAGE</code><br>
<code>)</code></p>
<p>这个函数检测实际的人脸，因此是关键代码，所以我们仔细检查一下选项。</p>
<ol>
<li>detectMultiScale function是一个检测对象的通用函数。由于我们调用它检测人脸，所以它就将检测人脸。第一个选项是图片灰度转换的相片。</li>
<li>第二个选项是scaleFactor。由于可能存在部分人脸距离相机相对较近，从而与较远处的人脸相比，尺寸较大。比例因子可以进行抵消补偿。</li>
<li>检测算法使用了一个活动窗口进行目标检测。minNeighbors选项定义了在其声明人脸被找到前，当前对象附件的目标数量。同时，minSize选项给出了每个窗口的大小。</li>
</ol>
<p>在这些方面我采用了常用值。在实际中你可以对窗口尺寸、补偿系数等进行调试直到找到最适合的值。</p>
<p>函数的返回值是一组四边型，四边型内是算法检测到的人脸。下一步，我们将对函数的这些返回值进行循环。</p>
<p><code>print &quot;Found {0} faces!&quot;.format(len(faces))</code></p>
<p><code># Draw a rectangle around the faces</code><br>
<code>for (x, y, w, h) in faces:</code><br>
<code>cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)</code></p>
<p>这个函数返回4个值：四边型的X轴、Y轴位置，四边型的宽度W和高度H。</p>
<p>使用以上4个值调用内置函数rectangle()画出一个四边型。</p>
<p><code>cv2.imshow(&quot;Faces found&quot; ,image)</code><br>
<code>cv2.waitKey(0)</code></p>
<p>最后，展示这个图片给用户，并等待用户的一个键盘输入。</p>
<p>结果检查</p>
<p>让我们再对Abba图片进行一次测试。<br>
<code>$ python face_detect.py abba.png haar级联_frontalface_default.xml</code><br>
需要注意的是，由于采用了基于机械学习的算法，检测结果永远无法达到100%精确。大多数案例中你都能得到较好的结果，但偶尔算法也会检测到错误的对象，就像检测到错误的人脸一样。</p>
<p>代码在这里。<br>
https://github.com/Connection-Point/FaceDetect</p>
<p>使用网络摄像头?<br>
如果你想便用摄像头怎么办？OpenCV从摄像头按帧抓取图片后你就可以按帧进行人脸检测了。你需要一台高性能计算机，虽然我已用了3年的笔记本可以应付这项工作，但我也只是在做毕业设计的时候才使用这个技术。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何选择：游戏笔记本电脑对比游戏台式机?]]></title>
        <id>https://Connection-Point.GitHub.io/post/ru-he-xuan-ze-you-xi-bi-ji-ben-dian-nao-dui-bi-you-xi-tai-shi-ji/</id>
        <link href="https://Connection-Point.GitHub.io/post/ru-he-xuan-ze-you-xi-bi-ji-ben-dian-nao-dui-bi-you-xi-tai-shi-ji/">
        </link>
        <updated>2022-03-24T07:40:05.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p><strong>您应该选购笔记本电脑还是台式机？这是一个重要的选择，将最终决定您可以用这台新计算机做什么和不能做什么。我们将同时介绍这二者的优势，以便您确定适合自己的选择。</strong></p>
<p>在游戏笔记本电脑与游戏台式机之间进行选择时，需要考虑几个重要因素。虽然游戏笔记本电脑更小巧便携，但是游戏台式机空间更大并且可定制程度更高。二者都是不错的选择，但也都有其强项和弱项。<br>
哪种外形尺寸能为您的 PC 体验提供更好的支持？让我们来了解一下其各自不同的特点和应用场景。</p>
<p><em>性能</em><br>
<img src="https://Connection-Point.GitHub.io/post-images/1648107988367.jpg" alt="" loading="lazy"><br>
尽管在购买 PC 时看起来并非依靠直觉，但性能或许不是您做出决定的一项重要因素。与台式机相比，笔记本电脑系统曾一度被认为“性能不足”，但这一情况已有所转变。<br>
现如今的游戏笔记本电脑可以表现出令人难以置信的高效和强劲。尽管出于高端组件和散热考虑，台式机仍然具有性能优势，但这种差异远没有以前那么明显。二者性能几乎并驾齐驱，因此让我们来看一下您要考虑的其他因素。</p>
<p><em>便携性</em><br>
<img src="https://Connection-Point.GitHub.io/post-images/1648108127056.png" alt="" loading="lazy"><br>
在比较游戏笔记本电脑与游戏台式机时，首先您要问自己的问题是，您是更喜欢可以随处使用的计算机，还是更大、更重但提供更多端口和定制选项的计算机。笔记本电脑的主要优势是便携性。借助合适的笔记本电脑，您能够实现台式机所具有的大部分功能，并且几乎可以在任何地方使用。如果您经常离家外出，这种灵活性显然优势明显。如今的笔记本电脑比以往更轻薄小巧，因此，您可以在通常不便（或不应该）携带台式机的地方使用，比如在飞机上，或者在喜欢的咖啡店里。同时，游戏笔记本电脑通常配有高端硬件，让您可以随时随地玩竞技游戏和 AAA 级游戏。 笔记本电脑依靠电池供电，并配备内置显示屏以及集成的键盘和触控板，但如果您使用合适的外设，也可以在家中获得类似台式机的体验。坞站、鼠标、键盘和外接游戏显示器等附加设备可进一步提高笔记本电脑的多功能性，但确实增加了初始购买之外的成本。另一方面，台式机的体积大得多，不方便携带。即使小型的台式机 也还是需要电源插座和显示器。虽然有些人不介意将整套的设备搬到特殊场合，例如局域网联机游戏派对，但大多数人还是习惯于将台式机体验限制在一个地方。 台式机还提供了广泛的 I/O 支持或连接外部设备的能力，通常可通过主板或使用 PCIe* 连接的扩展插槽设备（例如独立显卡）实现。机箱还可能提供更多的连接选项，例如前置 USB 和音频端口。这意味着它可以支持多台显示器、非标准外设、额外的 USB 连接选项，以及更加动态和灵活的工作站或游戏站。</p>
<p><em>硬件升级</em><br>
<img src="https://Connection-Point.GitHub.io/post-images/1648108153593.jpg" alt="" loading="lazy"><br>
笔记本电脑的便携性有其自身的缺点，即紧凑的外形使其难以进行升级。在许多笔记本电脑上，处理器和显卡是焊接在主板上的，或者难以触及。在这方面台式机具有优势，其内部组件易于拆装。 由于笔记本电脑的紧凑型设计，其升级难度要大得多。有些笔记本电脑可以升级 RAM 或存储，但升级 CPU 或 GPU 对普通用户来说几乎无法实现。在购买笔记本电脑时，请注意，只要您继续用这台机器，就只能使用大致相同的内部组件。与之相反，大多数台式机都易于升级。由于采用模块化布局，因此组件更换相对容易，这使您可以根据需要升级硬件。当您的 PC 开始出现老化时，您无需购置新机，而是可以根据需要逐步更新，使您的台式机与硬件潮流保持同步。即使是预装的 PC 也是可以升级的，虽然这会需要您经常与制造商确认对电脑进行改动会不会违反保修条款。</p>
<p><em>定制与客制化</em><br>
<img src="https://Connection-Point.GitHub.io/post-images/1648108222393.jpg" alt="" loading="lazy"><br>
同样地，台式机的物理尺寸使它们可以拥有笔记本电脑无法提供的定制选项。购买笔记本电脑时，您通常可以从一系列核心组件中进行选择，包括存储器和 RAM，CPU 和 GPU，有时还有显示屏。就微调性能而言，可能有一定的灵活性，但在大多数情况下，从购买之日起，您将使用相同的硬件，直到更换电脑为止。笔记本电脑的外观设计也是如此。虽然您的选择比以往任何时候都多，但也只能从预先设计好的外形中挑选，并且定制选项的数量相当有限，例如定制喷漆和键盘背光。对于台式机而言，定制是其非常大的吸引力之一。因为您可以很容易地换掉硬件，所以能够确保拥有自己需要的，去除自己不要的。台式机提供：</p>
<ul>
<li><strong>多种定制硬件选项</strong><br>
无论您是需要 超频 CPU并通过定制液体冷却回路来确保适宜温度，还是更青睐小型化游戏台式机，当您能够如此精确地控制自己的电脑配置时，一切皆有可能。</li>
<li><strong>高度可调控的性能</strong>。<br>
定制的硬件使您可以确保 PC 以高性能运行。与笔记本电脑相比，台式机可利用的外表面积更大，这就意味着有更多空间容纳组件，例如强大的冷却解决方案。您可以加装风扇、一体式 (AIO) CPU 冷却器或复杂的定制冷却回路，从而为您的特定硬件需求提供精确设计的散热解决方案。</li>
<li><strong>更多美化选择</strong>。<br>
台式机还可以实现更大程度上的美化。除了机箱的颜色外，您还可以为 PC 的每个组件选择不同的尺寸、品牌、规格和外观设计。不仅可以通过精心挑选的硬件和散热解决方案来定制电脑的性能，您还可以通过独特的外观设计打造个性化的生活方式。<br>
如果您偏好预装电脑 ，仍可享受这种高度的定制设计。有些供应商会在系统组装前允许您自行选择新 PC 的配置，这意味着您可以获得自装台式机的优势，即使不是亲自动手。</li>
</ul>
<p>*并排对比 *<br>
在决定购买游戏笔记本电脑还是游戏台式机时，没有标准答案。二者各有优缺点。 无论您是想要游戏笔记本电脑的便携性，还是更喜欢台式机游戏 PC 的众多自定义选项（包括组装自己 PC 的选项），这都取决于您更注重哪方面。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[❕ 程序员必备网站 ❕]]></title>
        <id>https://Connection-Point.GitHub.io/post/cheng-xu-yuan-bi-bei-wang-zhan/</id>
        <link href="https://Connection-Point.GitHub.io/post/cheng-xu-yuan-bi-bei-wang-zhan/">
        </link>
        <updated>2022-03-17T03:07:15.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>1、Github (https://github.com/) : 程序员神站不解释。上面有各种开源库供学习使用，程序员心中的信仰！<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647486812004.jpeg" alt="" loading="lazy"></p>
<p>2、Google: 全能的老师，有什么问题直接找他就行了 哈哈哈。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647486872596.png" alt="" loading="lazy"></p>
<p>3、StackOverflow (https://stackoverflow.com/) : 全球最大编程问答社区，神站。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647486909296.jpg" alt="" loading="lazy"></p>
<p>4、SegmentFault (https://segmentfault.com/) : 中国比较专业，有深度的开发者社区。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647486954183.jpg" alt="" loading="lazy"></p>
<p>5、V2EX (https://www.v2ex.com/) : 一个主要讨论网络和技术话题的社区，访问者以程序员和设计师为主。氛围还不错。没事可以多逛逛。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647487071225.png" alt="" loading="lazy"></p>
<p>6、算法学习 LeetCode (https://leetcode.com/)：<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647487110435.png" alt="" loading="lazy"></p>
<p>7、InfoQ (https://www.infoq.cn/) : 一个在线新闻/社区网站，旨在通过促进软件开发领域知识与创新的传播，为软件开发者提供帮助。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647487350000.png" alt="" loading="lazy"></p>
<p>8、Gitee (https://gitee.com/) : 中国的Github，现在做的也相当不错。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647487422727.jpg" alt="" loading="lazy"></p>
<p>9、BiliBili a.k.a B 站 (https://www.bilibili.com/)：学编程的好平台，里边很多免费的高校学习资源，适合新入门的小白。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647487507996.jpg" alt="" loading="lazy"></p>
<p>10、ZDZN (https://www.zdzn.net/) : 专业开发者导航<br>
ZDZN导航是国内最专业的技术导航网。收录了大量的前端,后台,移动端,服务器,数据库等开发者常用网址。ZDZN旨在为广大开发者提供专业的技术网址导航,方便开发者平时日常工作;并为不同阶段的开发者学习进阶提供一定的引导作用。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647487633331.jpg" alt="" loading="lazy"></p>
<p>11、CSDN (https://www.csdn.net/) ：专业开发者社区<br>
全球知名中文IT技术交流平台,创建于1999年,包含原创博客、精品问答、职业培训、技术论坛、资源下载等产品服务,提供原创、优质、完整内容的专业IT技术开发社区.<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647487688426.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[俄罗斯解禁RuTracker的故事，是怎么骗你白白激动一场的？]]></title>
        <id>https://Connection-Point.GitHub.io/post/e-luo-si-jie-jin-rutracker-de-gu-shi-shi-zen-me-pian-ni-bai-bai-ji-dong-yi-chang-de/</id>
        <link href="https://Connection-Point.GitHub.io/post/e-luo-si-jie-jin-rutracker-de-gu-shi-shi-zen-me-pian-ni-bai-bai-ji-dong-yi-chang-de/">
        </link>
        <updated>2022-03-17T03:04:11.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>就在前几天，关于俄罗斯在受到西方多轮制裁之际，放出了曾被它在2015年封禁的盗版平台RuTracker，漂亮的反杀那些参与制裁的软件厂商，这个消息在中文社交媒体里已经传得甚嚣尘上了。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647486324662.jpg" alt="" loading="lazy"></p>
<p>你直接就可以在谷歌，微博还是抖音里搜到一抓一大把的这些标题以及文章：</p>
<p>俄罗斯解禁RuTracker，欲将盗版合法化！</p>
<p>毛子放出来终极大杀器，全球软件开启免费时代！</p>
<p>盗版网站RuTracker解封，互联网或倒退20年！</p>
<p>普京大手一挥，解禁黑客，允许盗版！</p>
<p>俄罗斯解禁的这个破解资源站，远超你我想象！</p>
<p>……</p>
<p>实在是很佩服这些创作方向的宏大，但是在事实层面，它们也已经魔怔到了一本正经的胡说八道的地步。</p>
<p>这类消息的传播非常符合当代互联网对于情绪化内容的渴求，以一个缺乏轰动效应的基础性事实为核，人为粘上了一箩筐的全是错误的理解和发挥，最后构建出了一条符合大多数情感倾向的叙事，也就是对俄罗斯遭受制裁的不满，满心期待俄罗斯可以拿出“反转”形势的底牌。</p>
<p>首先是RuTracker被解封这个“基础性事实”，根据Gamelook的考证，俄罗斯信息技术监管局Roskomnadzor并没有把RuTracker从封禁名单里拿掉，最早爆出RuTracker被解封的消息源是因为没有在封禁清单下的正确分类里搜索，因为搜到的名单里没有RuTracker，便误以为俄罗斯突然就把RuTracker给拿了出去。</p>
<p>所以其实连这个我称之为“基础性事实”的新闻都是假的，当然我不太认为这是主动造谣，因为太容易被证伪了，一查就知道，权当消息源是真的看错了，不过这对我要吐槽的事情来说并不重要，你完全可以就当俄罗斯真的把令人闻风丧胆的RuTracker放出来了。</p>
<p>那么，在这条消息最开始传播的时候，就有人真的去访问了RuTracker.org，发现竟然真的可以上去，然后搜索各种软件和电影，发现哇塞，竟然全都可以随便下载，一分钱都不用花，这简直简直简直了有木有，俄罗斯简直碉堡了，那些参与制裁的软件和游戏厂商这下岂不是要哭死啊，哈哈哈哈哈！</p>
<p>Emmmmmm……</p>
<p>上面我也说了，俄罗斯并没有解禁RuTracker，这就很吊诡了，人家啥也没干，你怎么能根据一条错误的新闻就成功访问RuTracker的？</p>
<p>这就好比说，你以为邻居给他的猎枪上了子弹，然后拿走了去打猎，但你并不知道邻居并没有放子弹进去，你扛着猎枪看到一头鹿，瞄准扣下扳机，砰的一声，鹿果然被打死了。这是奇迹吗？还是枪膛里其实一直有子弹？</p>
<p>所有传播和消费俄罗斯解禁RuTracker的人，要么是真的不知道，要么是假装不知道，这个封禁是什么意思？</p>
<p>它的时代背景是，在跨国知识产权的保护性诉讼下，基于属地原则，每个参与国际秩序的国家，或多或少都会对自己境内的盗版网站进行处理，一般都会枪打出头鸟，也就是谁的规模越大，谁就越是容易被司法盯上。</p>
<p>全球闹得最大的盗版网站当属海盗湾（The Pirate Bay），成立于瑞典，因为流量曾经最大、同时死忠也最多，所以成了各国政府的眼中钉，过去十几年里被撵得颠沛流离，服务器到处搬，甚至还搞过募捐想要买一座岛宣布建国，通过创造主权来庇护盗版，想象力很丰富。</p>
<p>RuTracker作为俄罗斯境内最大的盗版网站，也是在2015年被莫斯科法院宣布违法，然后列入了封禁名单。</p>
<p>但是！</p>
<p>网站这种产物，数据都在云上，除非你能一次性的摧毁所有备份服务器，否则它不可能像一个活人一样，丢进监狱后就可以完全没有任何声响了。</p>
<p>所以所谓的俄罗斯封禁了RuTracker，不过就是和俄罗斯的通信运营商（相当于我们这边的中国电信、中国联通）联手，阻断从这些运营商中继的流量访问RuTracker.org罢了。</p>
<p>也就是说，被封禁的RuTracker，其实一直以来压根儿就TM活得好好的好吗，只是俄罗斯人自己内网用不了而已，只要你不从俄罗斯境内上网，在这个地球上的任何地方、任何时间，都可以随便访问RuTracker啊！</p>
<p>而且你要这么细捋下去，RuTracker在被俄罗斯封禁的那些年里，它的服务器是在西方，域名也在西方，等于说是在西方的规则里生存下来的，知识产权诉讼是没法去跟美国的域名管理机构提要求说谁谁谁搞盗版去把它域名封掉吧。</p>
<p>这才是前面说到的，为什么在俄罗斯放出RuTracker之后马上就有人如获至宝的发现竟然真的可以上了，因为对于它！就！从！来！没！有！不！能！上！过！</p>
<p>最后再来说说我们是不是就要迎来大盗版时代了这个耸人听闻的表达吧。</p>
<p>是的，RuTracker是俄罗斯最大的盗版网站，这点没错，但是它在全球而言，最鼎盛时期的流量也不过勉强挤入Top 10吧，在这个世界上，躲避各种封锁并且经营得非常好的盗版网站实在太多了，新西兰的YTS、美国的1337x和Rarbg、日本的Nyaa、法国的Torrent9、英国的Magnetdl⋯⋯两只手都数不过来。</p>
<p>在这每一个网站，你都能随时搜索并下载到各种电影/软件/游戏的资源，如果真的可以让版权方破产的话，它们早就破产一百次了。</p>
<p>这些网站的原理其实也很简单，它们就相当于一个专门收录P2P资源的搜索引擎，爬虫在DHT网络里抓取磁力链接等信息，然后呈现到自己的网站上，就是这么枯燥无味，毫无神乎其神的技术含量，RuTracker跟它们没有任何区别。</p>
<p>所以也不存在什么俄罗斯爆炸强的破解团队从此可以放开手脚干了，它们和RuTracker这样的网站没有上线和下线那样的关系，就好比我在NGA看到有人在RuTracker上搜到了破解版的老头环就很自然的解读为俄罗斯黑客报复西方制裁然后破解了当下最热门的商业游戏并上传到了盗版网站上……</p>
<p>怎么说呢，一个快意恩仇的剧本补完，有的时候并不需要推敲核查的原则，在人人都可身兼编剧的网络世界，只要可以满足颅内高潮，遍地都是可以随时拼装出厂的小说素材。</p>
<p>至于为什么现在大家都会对这种“竟然什么资源都能搜到”的产品感到瞠目结舌呢？我所能想到的解释只能是，漫长的流媒体服务已经潜移默化的瓦解掉了古典互联网时代的太多记忆，对于现在的网民来说，如果爱奇艺B站Netflix上找不到一部片子，那么就等同于他看不到这部片子了。</p>
<p>所以之前B站买了一些经典电影的版权上架时，我才很不理解“早就想看XXX这部电影了，这下终于能如愿了”，他们是真的没有主动找到这些资源的能力。</p>
<p>必须强调的是，我在说这些的时候，是真的没带任何一丝优越感，我不可能为自己用筷子用得很熟练而倍感骄傲，同时也不是在鼓吹盗版有理，我没有兴趣参与价值判断，那些盗版网站在客观上，就是运行在这个世界上，我只是表述了事实，无意宣扬。</p>
<p>与此同时，知识产权界对于盗版行为的围剿，也早已迭代了好几个版本，你随时可以下载盗版的Photoshop，不会有人管你，版权方通常都是在商用层面进行集中诉讼，比如你一家公司要上市，那么为了资本市场的合规要求，公司里的电脑基本上就都要是正版，版权方们把这个口子卡死，然后隔三差五的敲打一下领头的盗版平台——禁是肯定禁不掉的，就是要抬高运营成本，让站长疲于奔命——在这样的体系内，经营就足够稳定了。</p>
<p>去年我推荐过一本名为“事实”的书，里面有一段话，非常值得我再次摘录出来，并向各位分享：</p>
<p>“如果你总是执着于或迷信于某种特定的想法，那么你就会自动忽略不符合你想法的信息。这不是一种能够帮助你认识真相的方法。相反，你应该持续地测试自己的想法的不足之处，保持熟悉领域之外的好奇，多和拥有不同意见的人交流，把这些不同意见看作帮助你真正理解这个世界的有用的资源，而不是仅仅和那些和你有共同观点的人一起交流。”<br>
摘自：阑夕（ID:techread）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[都说AMD性价比高，但装机用户大都选择Intel，这是为什么？]]></title>
        <id>https://Connection-Point.GitHub.io/post/du-shuo-amd-xing-jie-bi-gao-dan-zhuang-ji-yong-hu-da-du-xuan-ze-intelzhe-shi-wei-shi-me/</id>
        <link href="https://Connection-Point.GitHub.io/post/du-shuo-amd-xing-jie-bi-gao-dan-zhuang-ji-yong-hu-da-du-xuan-ze-intelzhe-shi-wei-shi-me/">
        </link>
        <updated>2022-03-17T02:56:19.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>就有这么一种怪现象：很多人都觉得AM产品的性价比高，但事实上AMD 显卡卖不过 NVIDIA，CPU 卖不过 Intel。特别在处理器方面，大部分的用户嘴上说着AMD的CPU怎么好，但在装机的时候毫不犹豫就选择Intel的了，这是为什么呢？</p>
<p>这里总结了网上各种说法，整理出了以下几点：</p>
<p>第一，最为大家吐槽的一点莫过于AMD的散热问题，都知道AMD有着良好的超频，对此处理器的功耗偏大，发热量很大需要良好的散热器配合，尤其是夏天来临温度高，处理器频率下降就会影响到电脑的运行速度。为了解决这个问题，AMD每次上新品之前必定会对散热器精心设计，为此曾有人调侃AMD卖散热器送CPU。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647485852163.png" alt="" loading="lazy"></p>
<p>第二，AMD处理器没有Intel的稳定性强。很多公司在为员工配置电脑时大都会选择Intel，主要是因为其稳定性高，无论是从日常办公，还是做设计画图，又或是浮点运算方面，Intel确实略强于AMD。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647485866155.jpg" alt="" loading="lazy"></p>
<p>第三，处理器市场定位的问题，上面说到AMD拥有良好的超频，为此吸引了不少超频玩家，它更侧重于发烧友玩家的市场。而Intel则侧重于办公和家用，这么一来Intel的市场也就比AMD的要广了。当然这也有一些垄断的因素在里面，但主要原因还是Intel优异稳定的性能，才使得用户将其设为购买首选。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1647485934850.jpg" alt="" loading="lazy"></p>
<p>这样看来，AMD也就价格低廉、超频等等能够吸引部分用户，那为什么还能做到现在呢？</p>
<p>要知道，intel的产品能从性能到稳定性再到发热耗电都可以盖AMD一条街，但为此它就必须雇佣每个领域最顶尖的专业人才、走最苛刻的研发测试流程，成本自然就上去了。而AMD专攻低端市场，不求面面俱到，发热大风扇噪音大？但不妨想想，便宜千把块就能玩上最新游戏还敢奢求太多？简单来说Intel定位专业、高性能；AMD定位廉价、DIY，或许这就是市场中的“差异化竞争”和“品牌定位”吧。但是据目前的情况来说，对于想要追求高拓展性还有超频的极客们来说，AMD还是相当的Yes的！况且本人在写这篇文章的时候也是使用的AMD锐龙5 5600X的，性能还是杠杠的！果然还是AMD Yes！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[什么是加密货币？]]></title>
        <id>https://Connection-Point.GitHub.io/post/shi-me-shi-jia-mi-huo-bi/</id>
        <link href="https://Connection-Point.GitHub.io/post/shi-me-shi-jia-mi-huo-bi/">
        </link>
        <updated>2022-02-28T18:15:43.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>加密货币是一种数字货币，只存在于互联网上一个叫做“区块链”的计算机网络中。它们是虚拟货币，分散在传统银行之外，但仍可以像其他货币一样进行交易。 比特币是最原始、最知名的加密货币，但目前基于同一技术的加密货币有1000多种。</p>
<p><strong>加密货币是如何工作的？</strong><br>
<img src="https://Connection-Point.GitHub.io/post-images/1646072478517.jpg" alt="" loading="lazy"><br>
加密货币是一种没有中央权力的数字货币，意味着没有任何个人或机构(比如中央银行)控制它。这种想法类似于文件共享的对等网络，即网络上的每个人都共享文件，它们不只是存储在一台计算机上。没有中央权力机构，就不需要信任任何一个实体来控制账户、余额和交易。换句话说，它提高了透明度，降低了系统内出现欺诈性或“双倍支出”等错误的风险。</p>
<p>新创建的加密货币（如比特币）被输入到称为区块链的数据库中。当计算机在一个所谓挖掘的过程中处理一组复杂的算法时，货币就产生了。这些算法使用加密技术来保护事务，并规范加密货币额外单元的创建。<br>
在网络中，每个对等点都有所有事务的完整历史记录，从而记录每个账户余额。加密货币作为一种显示金融交易的方式存在。请参阅下面事务的生命周期。</p>
<p><strong>事务生命周期</strong><br>
<img src="https://Connection-Point.GitHub.io/post-images/1646072250298.png" alt="" loading="lazy"></p>
<p><strong>什么是区块链技术？</strong><br>
<img src="https://Connection-Point.GitHub.io/post-images/1646072410979.jpg" alt="" loading="lazy"><br>
所有加密货币交易都存储在一个名为区块链的数字分散的公共分类帐中。每个新事务表示所有事务链中的一个新“块”。区块链利用分布式账本技术(DLT)来处理数字货币交易。加密货币用户可以跟踪通过区块链进行的所有事务，但是，进行事务的用户名是匿名的。在网络的每个节点上都下载了区块链的副本，这使得对中央记录的需求变得多余。</p>
<p><strong>什么是加密货币挖掘？</strong><br>
<img src="https://Connection-Point.GitHub.io/post-images/1646072449911.jpg" alt="" loading="lazy"><br>
加密货币(或加密硬币或Altcoin)挖掘是验证加密货币交易的过程。数字矿工不使用镐，而是使用强大的计算机算法来处理复杂的密码谜题。对于每笔经过验证并添加到区块链的交易，矿工将获得一些新硬币作为奖励。任何人都可以成为一名拥有合适硬件的矿工，但比特币、以太币以及其他流行的加密货币的开采现在主要是由位于电力成本较低地区的大规模操作所主导。</p>
<p><strong>什么是密码系统？</strong><br>
密码系统使用数学密码来保密信息。用户只有知道将加密信息转换为正常语言的密钥，才能读取加密信息。在计算机时代，密码系统太复杂，人类大脑无法破译，因此计算机算法既加密又解密。使用密码系统的一个最著名的例子是纳粹德国在第二次世界大战中使用的恩尼格玛(Enigma)机器，后来在布莱切利公园(Bletchley Park)被英国密码学家破译。</p>
<p><strong>如何使用加密货币</strong><br>
<img src="https://Connection-Point.GitHub.io/post-images/1646072563410.png" alt="" loading="lazy"><br>
加密货币的设计目的是提供一种在线支付和交易的替代方式，但它们尚未被广泛采用。过去几年里，所有的猜测都是因为相信有一天加密货币会(或不会)被广泛采用。从本质上讲，投资者押注加密货币将被用作货币。<br>
作为提醒，金钱有三个用途：</p>
<pre><code>1. 交换媒介(可用于买卖物品)
2. 一种记帐单位(可被分割成可以代表不同事物的真实价值的单位)
3. 储存价值(随着时间的推移保持其价值)
</code></pre>
<p>关于加密货币是否能够提供这些特性的争论很多。至少目前，使用加密货币作为货币的主要问题是价格的波动。由于加密货币的波动性太大，没有多少商家接受加密货币作为一种支付方式，商品或服务的价格将不得不每天发生变化以保持同步，而价格变化太大，以至于无法依靠加密货币来保值。如果价格稳定，所有这些事情都可能开始改变。</p>
<p><strong>关于稀缺性的争论</strong><br>
就比特币而言，主流经济学家普遍认为，只要发行2100万枚比特币，一个经济体就无法运转。在目前的货币体系下，银行可以通过银行贷款创造无限的新货币供应。在当前的货币体系(如美元)下，法定货币的价值会随着时间的推移被通货膨胀所侵蚀。据推测，比特币是以黄金(即采矿)等贵金属为模型的，其基础是稀缺性有助于维持价值。从地下开采出来的黄金只有这么多，总有一天会所剩无几，否则开采起来就太贵了。比特币的支持者认为，比特币可以分成更小的单位，一旦比特币的总供应量被开采出来，比特币的价值就会增加。</p>
<p><strong>最受欢迎的加密货币</strong><br>
<em><strong>比特币（BTC）</strong></em><br>
比特币是最著名、最昂贵的原始加密货币。中本聪(Satoshi Nakamoto)在2009年创造了比特币，他的真实身份从未被完全证实。比特币如此突出，以至于其他所有加密币都被称为代币，即比特币的替代品。每一枚比特币的巨大价码已经让投资者转向了代币。投资者的诀窍是找到未来可能与比特币共存或最终取代它的替代货币。大多数代币声称能够找到解决比特币缺陷的办法——尤其是它有限的可伸缩性。到目前为止，比特币的市值仍然远远高于最接近的替代品。</p>
<p><em><strong>以太坊（ETH）</strong></em><br>
<img src="https://Connection-Point.GitHub.io/post-images/1646072664866.jpg" alt="" loading="lazy"><br>
以太坊是一个分布式公共区块链网络，创建于2015年。以太坊和比特币的主要区别在于网络的功能。以太坊用于为分散的应用程序运行编程代码，而不是用于跟踪加密货币的所有权。以太坊网络有自己的货币，称为以太币。以太币是交易的东西，但它经常被错误地称为以太坊。中心的前提是，任何想要使用区块链技术的人，都可以在不构建一个全新的应用程序的情况下，重新使用以太坊。许多新的代币都是通过以太网络推出的，而像EOS, Zilliqa和RChain这样较大的一些最终会发行独立的区块链。</p>
<p><em><strong>Ripple (XRP)</strong></em><br>
<img src="https://Connection-Point.GitHub.io/post-images/1646072717352.jpg" alt="" loading="lazy"><br>
Ripple是一种转账方式，但它与比特币网络的工作方式不同。它不使用区块链技术，也不限于转让自己的硬币。Ripple能够传输任何类型的货币，包括加密、法定货币、黄金，甚至航空里程。银行对Ripple很感兴趣，因为它的交易速度(比比特币快1万倍)。Ripple有自己的货币，可以进行交易，但10万个货币像公司股票一样发行，而不是被开采。</p>
<p><em><strong>EOS (EOS)</strong></em><br>
<img src="https://Connection-Point.GitHub.io/post-images/1646072749674.jpg" alt="" loading="lazy"><br>
EOS是2017年推出的EOS.IO区块链协议的本机加密货币。其目的是作为一个智能的合同平台和分散的操作系统来运行分散应用程序和提供分散存储。EOS.IO旨在解决比特币等旧区块链的可伸缩性问题，并消除传统金融领域用户的所有费用。EOS货币用于为账户持有人创建/使用的应用程序在区块链上获得带宽和存储。</p>
<p><em><strong>比特现金（BCH）</strong></em><br>
<img src="https://Connection-Point.GitHub.io/post-images/1646072789553.png" alt="" loading="lazy"><br>
比特现金是经典比特币(最初的比特币)最著名的“硬叉”。硬叉正在基于现有的比特币技术创造一种全新的货币。创建叉的主要原因是为了添加可伸缩性。最大的变化是增加块的大小，以允许每秒处理更多事务(即更快)。</p>
<p>本文摘自：https://www.lcg.com/int/zh/analysis-education/trading-guides/introduction-to-trading/what-are-cryptocurrencies/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[何为RTX显卡呢？RTX和GTX有何区别？]]></title>
        <id>https://Connection-Point.GitHub.io/post/he-wei-rtx-xian-qia-ni-rtx-he-gtx-you-he-qu-bie/</id>
        <link href="https://Connection-Point.GitHub.io/post/he-wei-rtx-xian-qia-ni-rtx-he-gtx-you-he-qu-bie/">
        </link>
        <updated>2022-02-23T13:48:25.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>在2018年的9月份英伟达正式推出全新的GeForce RTX 显卡，该显卡是NVIDIA历经了十年打造而成的全新系列显卡，该显卡拥有着目前最新的Turning（图灵）架构，和上一代产品Pascal架构相比，其性能有着革命性的提升。让游戏画面效果更加真实，支持光线追踪技术以及DLSS技术等特性。</p>
<p><strong>那么RTX和GTX有何区别？各代表什么意思呢？</strong></p>
<p>我们日常所说的GTX系列显卡是nVIDIA显卡的高端显卡或者是加强版显卡的代号，从高到低依次是GTX/GT/GS（高端产品/中端产品/低端产品）。比如在6800GT和6600GT，到了2005年的7800系列便引入了“GTX”的代号，变代替当时高端显卡代号。在进入GTX400系列之后，代表低端显卡的“GTS”也没有，全部的独立显卡统称为“GTX”，而有区别只是显卡后面数学大小来区分。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1645624661785.jpg" alt="" loading="lazy"></p>
<p>Nvidia终于在2021年最新的RTX 30系列有所改变，在高端的3080TI和3090都统称为“RTX”，在统称中的“RT”所代表的是光线追踪（Ray Tracing的缩写），其意思是RTX 3080TI和RTX 3090显卡都拥有非凡的光线追踪性能，所谓的光线追踪是指在游戏中有着更好更真实的显示效果（其中包括阴影，光线，反射等），RTX 30显卡所采用的“图灵”架构加入RT计算单元，使得RTX30显卡的光线追踪性能和上一代产品相比提升数倍，使得游戏看起来更加真实，给玩家营造更好的游戏体验。</p>
<p>笔者说这么多，可能有一些小伙们还不是很了解，下面我们一起来看一下这个例子吧，方便我们更好理解。<br>
<img src="https://Connection-Point.GitHub.io/post-images/1645624276388.png" alt="" loading="lazy"><br>
<img src="https://Connection-Point.GitHub.io/post-images/1645624299704.png" alt="" loading="lazy"><br>
<img src="https://Connection-Point.GitHub.io/post-images/1645624336521.png" alt="" loading="lazy"><br>
<img src="https://Connection-Point.GitHub.io/post-images/1645624361086.png" alt="" loading="lazy"></p>
<p>从上面的图片我们可以清楚的了解到GTX1660 Super显卡和RTX3080显卡两则之间整体差距还是非常大的，比如显存类型、全新的架构、更高的核心频率等特性。当然对于大部分的学生党来说，RTX 3080显卡还是有有些小贵的，如果想要入手的话可以将目光迈向RTX 20系列或者是比较入门级别的RTX 3060</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在GitHub-Page搭建Hexo博客]]></title>
        <id>https://Connection-Point.GitHub.io/post/zai-github-page-da-jian-hexo-bo-ke/</id>
        <link href="https://Connection-Point.GitHub.io/post/zai-github-page-da-jian-hexo-bo-ke/">
        </link>
        <updated>2022-02-23T05:16:20.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>我打算用hexo结合github pages构建一个轻博客网站，每周发表至少一篇博文。<br>
Hexo建站参考教程</p>
<p>使用hexo建站到github pages的完整教程推荐如下：</p>
<p>https://zhuanlan.zhihu.com/p/78467553</p>
<p>https://segmentfault.com/a/1190000017986794</p>
<p>https://theme-stun.github.io/docs/zh-CN/</p>
<p>https://hexo.io/zh-cn/index.html</p>
<p>https://blog.csdn.net/hhgggggg/article/details/77853665</p>
<p><strong>使用Stun主题</strong></p>
<p>Stun主题比较好看，我还稍微配置了一下可以跟Typora连用（主要是为了能够正常显示插图和附件）。效果如下图：<br>
<img src="https://Connection-Point.GitHub.io/post-images/1645593478038.png" alt="" loading="lazy"></p>
<p>需要安装的插件列表</p>
<ol>
<li>Git相关插件，用于Deploy到GitHub Pages上</li>
<li>Search相关插件，方便对站内内容进行搜索</li>
<li>Asset-imager相关插件，方便插图附件之类的</li>
</ol>
<!-- more -->
<p><strong>开启评论系统</strong></p>
<p>Gitalk插件是利用GitHub仓库的Issue功能，为了节约空间，我另外开了一个Sea-Comments的仓库作为存储。然后照着以下教程进行操作：</p>
<p>https://www.jianshu.com/p/4242bb065550</p>
<p>https://theme-stun.github.io/docs/zh-CN/advanced/third-part.html#gitalk</p>
<p>https://github.com/gitalk/gitalk</p>
<p>需要注意的是，Stun主题已经嵌入了Gitalk，只要到Stun主题下的_config.yaml下添加自己评论仓库的一些信息即可。</p>
<pre><code>gitalk会出现Error Network报错，弃用~，之后使用valine，评论数据存储在LeanCloud中，如有必要，及时备份。

https://theme-stun.github.io/docs/zh-CN/advanced/third-part.html#valine
</code></pre>
<p><strong>常用命令</strong></p>
<p>需要进入到hexo网站的本地根目录下执行命令，以windows系统为例：</p>
<pre><code>1. hexo clean &amp;&amp; hexo g &amp;&amp; hexo s: 若修改了**_config.yaml**配置文件，需要清除         public目录下所有内容，然后根据新的配置文件重新生成静态网页，并且启动本地服务器
2. hexo clean &amp;&amp; hexo d：修改配置后，重新发布到gitee pages上。
</code></pre>
<p><strong>注意事项</strong><br>
1. 尽量使用hexo new命令生成 pages或者新的Markdown文件，然后到_posts目录下对               Markdown文件进行编辑修改（使用typora）<br>
2. Markdown文件命名只能为英文或者数字，而标题可以在Markdown文件里边的Front Matter          YAML中进行设定（Front Matter YAML设定非常重要，参考链接）。<br>
3. GitHub仓库容量有限（&lt; 1 GB），长期使用个人博客，注意不要插入太多太大的图片，建议是          篇博文图片不超过10张。<br>
4. 博客内容完全公开，注意不要发布违法或者引发舆论的内容，并注意保护个人隐私。</p>
<p>参考内容： https://theme-stun.github.io/docs/zh-CN/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[挖矿是否会对我的显卡或电脑造成损害？]]></title>
        <id>https://Connection-Point.GitHub.io/post/wa-kuang-shi-fou-hui-dui-wo-de-xian-qia-huo-dian-nao-zao-cheng-sun-hai/</id>
        <link href="https://Connection-Point.GitHub.io/post/wa-kuang-shi-fou-hui-dui-wo-de-xian-qia-huo-dian-nao-zao-cheng-sun-hai/">
        </link>
        <updated>2022-02-23T05:05:19.000Z</updated>
        <content type="html"><![CDATA[<p>在本文中，我们将讲述有关显卡挖矿细节，并讨论挖矿活动是如何影响您的电脑硬件，通常来说，人们都会问“加密货币挖矿是否会缩短显卡的寿命”？<br>
那么，挖矿是否会伤害到您的显卡呢？</p>
<p>答案是肯定的，亦可为否定的。这取决于您如何设置并优化您的显卡，如果您使用了合适的设置，则无需担心！</p>
<p><img src="https://Connection-Point.GitHub.io/post-images/1645592834082.jpg" alt="" loading="lazy"><br>
与其他电子元器件一样，显卡在运行期间将吸取电能，且大部分电能将转换为热量。当显卡处于负载状态时(游戏、渲染或挖矿等)，这些电子元器件将会比平时更热，而热量主要将从显卡核心以及内存组件散发出去。</p>
<p>在某些案例中，稳定的显卡挖矿比起游戏可能还要更安全，运用显卡进行挖矿时，显卡负载水平相对均匀稳定，没有出现游戏过程中热量暴增暴跌等剧烈波动的情况。不同的纹理及贴图、游戏时间将给您的显卡带来不同的运行负载，这可能会导致您的显卡温度突然上升至70°C甚至80°C，然后又下降到50°C。</p>
<p>运用正确适当的设置，您可以将显卡的负载在均匀地摊分开来，例如，您的显卡可一直运行在65°C的温度水平，您可以阅读该文章了解如何有效优化您的硬件温度。</p>
<p>我们建议您观看这个视频作为参考，一个专门做游戏测试的Youtube频道做了一个测试，他们将一张崭新的RTX 2080 Ti游戏显卡与一张已用于挖矿一年半的RTX 2080 Ti的显卡作性能对比测试。测试结果显示，由于散热影响，用于挖矿的显卡性能略微有所下降，我们可以考虑原因是散热片老化所导致，如果更换新的散热片我们应该可以得到一个一样的性能表现。但同时需要注意的是，玩游戏甚至是办公使用之后的显卡，其散热片及其他配件也会随着时间的推移而老化。</p>
<p><strong><!-- more --><br>
如何防止挖矿给显卡造成损害或缩短显卡寿命？</strong></p>
<p>长期运行于80°C甚至90°C温度水平的显卡毫无疑问将有一定的几率遭受损害，且硬件寿命也将进一步缩短。</p>
<p>但有一个简单便捷的方法，可有效地降低显卡的温度同时不影响性能输出。</p>
<p>您在高中的物理课上应该学过这一点，运行功耗为200W的显卡与运行一个功耗为200W的加热器的效果本质上是相同的。</p>
<p>这意味着，如果您要降低显卡的热量输出，您必须降低显卡的功耗水平。幸运的是，目前有很多工具可以帮您实现这些操作，MSI Afterburner则是目前最受欢迎的超频或降频的工具之一。</p>
<p>💬摘自https://www.nicehash.com/blog/post/can-mining-damage-my-gpu-or-a-pc</p>
]]></content>
    </entry>
</feed>